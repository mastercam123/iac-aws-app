name: terraform deploy to aws
on:
    push:
        branches: [main]

jobs:
    deploy-web:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Print ref_name
          run: |
            echo "This is : ${{ github.ref_name }}"

        - name: Print Actor
          run: |
            echo "This is called by: ${{ github.actor }}"

        - name: Setup Terraform with specified version on the runner
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.7.0

        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          continue-on-error: true

        - name: Terraform init
          id: init
          env:
            AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
            AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
          run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

        - name: Terraform format
          id: validate
          run: terraform validate -no-color

        - name: Terraform plan
          id: plan
          run: terraform plan -no-color -input=false

        # - uses: actions/github-script@v6
        #   if: github.event_name == 'pull_request'
        #   env:
        #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        #   with:
        #     script: |
        #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
        #       <details><summary>Show Plan</summary>
    
        #       \`\`\`\n
        #       ${process.env.PLAN}
        #       \`\`\`
    
        #       </details>
        #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
    
        #       github.rest.issues.createComment({
        #         issue_number: context.issue.number,
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         body: output
        #       })

        - name: Terraform Plan Status
          if: steps.plan.outcome == 'failure'
          run: exit 1

        - name: Terraform Apply
          run: terraform apply -auto-approve -input=false